tasks.named("printGitSemVer") {
  group = "versioning"
  description = "Prints the Gradle project version resolved from git tags."
}

tasks.register("incrementMajorVersion") {
  group = "versioning"
  doLast {
    tag(getNextMajorVersion())
  }
}

tasks.register("incrementMinorVersion") {
  group = "versioning"
  doLast {
    tag(getNextMinorVersion())
  }
}

tasks.register("incrementPatchVersion") {
  group = "versioning"
  doLast {
    tag(getNextPatchVersion())
  }
}

tasks.register("pushTags") {
  group = "versioning"
  doLast {
    grgit.push { tags = true }
  }
}

def tag(String version) {
  grgit.tag.add {
    name = version
    message = "Release of $version"
  }
  println("Tagged version $version")
}

def getNextMajorVersion() {
  if (grgit.tag.list().isEmpty()) {
    return "1.0.0"
  } else {
    def versions = getVersions(getLatestTag())
    // Increment major version
    versions[0] += 1
    // Increment minor version
    versions[1] = 0
    // Increment patch version
    versions[2] = 0
    return versions.join(".")
  }
}

def getNextMinorVersion() {
  if (grgit.tag.list().isEmpty()) {
    return "0.1.0"
  } else {
    def versions = getVersions(getLatestTag())
    // Increment minor version
    versions[1] += 1
    // Increment patch version
    versions[2] = 0
    return versions.join(".")
  }
}

def getNextPatchVersion() {
  if (grgit.tag.list().isEmpty()) {
    return "0.0.1"
  } else {
    def versions = getVersions(getLatestTag())
    // Increment patch version
    versions[2] += 1
    return versions.join(".")
  }
}

def getSortedGitTags() {
  return grgit.tag.list().sort { x, y ->
    def xVersions = getVersions(x.name)
    def yVersions = getVersions(y.name)
    xVersions[0] <=> yVersions[0] ?:
      xVersions[1] <=> yVersions[1] ?:
        xVersions[2] <=> yVersions[2]
  }
}

def getVersions(var tag) {
  tag.tokenize('.')*.asType(Integer)
}

def getLatestTag() {
  getSortedGitTags().last().name
}

ext.isSnapshotVersion = { ->
  project.version.toString().contains("dev") || project.version.toString().contains("noTag")
}

gitSemVer {
  developmentIdentifier = "dev"
  noTagIdentifier = "noTag"
  enforceSemanticVersioning = true
  //  ensure that other tasks can already access the computed SemVer during evaluation
  assignGitSemanticVersion()
}
